# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MPWide', [dirname(__file__)])
        except ImportError:
            import _MPWide
            return _MPWide
        if fp is not None:
            try:
                _mod = imp.load_module('_MPWide', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MPWide = swig_import_helper()
    del swig_import_helper
else:
    import _MPWide
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MPW_PacingMode = _MPWide.MPW_PacingMode

def MPW_setAutoTuning(*args):
  return _MPWide.MPW_setAutoTuning(*args)
MPW_setAutoTuning = _MPWide.MPW_setAutoTuning

def MPW_AutoTuning():
  return _MPWide.MPW_AutoTuning()
MPW_AutoTuning = _MPWide.MPW_AutoTuning

def MPW_Print():
  return _MPWide.MPW_Print()
MPW_Print = _MPWide.MPW_Print

def MPW_NumChannels():
  return _MPWide.MPW_NumChannels()
MPW_NumChannels = _MPWide.MPW_NumChannels

def MPW_CreatePathWithoutConnect(*args):
  return _MPWide.MPW_CreatePathWithoutConnect(*args)
MPW_CreatePathWithoutConnect = _MPWide.MPW_CreatePathWithoutConnect

def MPW_ConnectPath(*args):
  return _MPWide.MPW_ConnectPath(*args)
MPW_ConnectPath = _MPWide.MPW_ConnectPath

def MPW_CreatePath(*args):
  return _MPWide.MPW_CreatePath(*args)
MPW_CreatePath = _MPWide.MPW_CreatePath

def MPW_DestroyPath(*args):
  return _MPWide.MPW_DestroyPath(*args)
MPW_DestroyPath = _MPWide.MPW_DestroyPath

def MPW_setWin(*args):
  return _MPWide.MPW_setWin(*args)
MPW_setWin = _MPWide.MPW_setWin

def MPW_setPathWin(*args):
  return _MPWide.MPW_setPathWin(*args)
MPW_setPathWin = _MPWide.MPW_setPathWin

def MPW_CloseChannels(*args):
  return _MPWide.MPW_CloseChannels(*args)
MPW_CloseChannels = _MPWide.MPW_CloseChannels

def MPW_Finalize():
  return _MPWide.MPW_Finalize()
MPW_Finalize = _MPWide.MPW_Finalize

def MPW_PSendRecv(*args):
  return _MPWide.MPW_PSendRecv(*args)
MPW_PSendRecv = _MPWide.MPW_PSendRecv

def MPW_SendRecv(*args):
  return _MPWide.MPW_SendRecv(*args)
MPW_SendRecv = _MPWide.MPW_SendRecv

def MPW_Relay(*args):
  return _MPWide.MPW_Relay(*args)
MPW_Relay = _MPWide.MPW_Relay

def MPW_DCycle(*args):
  return _MPWide.MPW_DCycle(*args)
MPW_DCycle = _MPWide.MPW_DCycle

def MPW_Cycle(*args):
  return _MPWide.MPW_Cycle(*args)
MPW_Cycle = _MPWide.MPW_Cycle

def MPW_splitBuf(*args):
  return _MPWide.MPW_splitBuf(*args)
MPW_splitBuf = _MPWide.MPW_splitBuf

def MPW_Barrier(*args):
  return _MPWide.MPW_Barrier(*args)
MPW_Barrier = _MPWide.MPW_Barrier

def MPW_setChunkSize(*args):
  return _MPWide.MPW_setChunkSize(*args)
MPW_setChunkSize = _MPWide.MPW_setChunkSize

def MPW_ISendRecv(*args):
  return _MPWide.MPW_ISendRecv(*args)
MPW_ISendRecv = _MPWide.MPW_ISendRecv

def MPW_Has_NBE_Finished(*args):
  return _MPWide.MPW_Has_NBE_Finished(*args)
MPW_Has_NBE_Finished = _MPWide.MPW_Has_NBE_Finished

def MPW_Wait(*args):
  return _MPWide.MPW_Wait(*args)
MPW_Wait = _MPWide.MPW_Wait

def MPW_getPacingRate():
  return _MPWide.MPW_getPacingRate()
MPW_getPacingRate = _MPWide.MPW_getPacingRate

def MPW_setPacingRate(*args):
  return _MPWide.MPW_setPacingRate(*args)
MPW_setPacingRate = _MPWide.MPW_setPacingRate

def MPW_Init_c(*args):
  return _MPWide.MPW_Init_c(*args)
MPW_Init_c = _MPWide.MPW_Init_c

def MPW_Init1_c(*args):
  return _MPWide.MPW_Init1_c(*args)
MPW_Init1_c = _MPWide.MPW_Init1_c

def MPW_SendRecv1_c(*args):
  return _MPWide.MPW_SendRecv1_c(*args)
MPW_SendRecv1_c = _MPWide.MPW_SendRecv1_c

def MPW_SendRecv_c(*args):
  return _MPWide.MPW_SendRecv_c(*args)
MPW_SendRecv_c = _MPWide.MPW_SendRecv_c

def MPW_PSendRecv_c(*args):
  return _MPWide.MPW_PSendRecv_c(*args)
MPW_PSendRecv_c = _MPWide.MPW_PSendRecv_c


def MPW_DNSResolve(*args):
  return _MPWide.MPW_DNSResolve(*args)
MPW_DNSResolve = _MPWide.MPW_DNSResolve

def MPW_Init(*args):
  return _MPWide.MPW_Init(*args)
MPW_Init = _MPWide.MPW_Init

def MPW_DSendRecv(*args):
  return _MPWide.MPW_DSendRecv(*args)
MPW_DSendRecv = _MPWide.MPW_DSendRecv

def MPW_Send(*args):
  return _MPWide.MPW_Send(*args)
MPW_Send = _MPWide.MPW_Send

def MPW_Recv(*args):
  return _MPWide.MPW_Recv(*args)
MPW_Recv = _MPWide.MPW_Recv

